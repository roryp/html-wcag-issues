AWSTemplateFormatVersion: '2010-09-09'
Description: 'Azure Foundry RAG Website - AWS CloudFormation Template'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - staging
      - prod
    Description: Environment name

  WebsiteBucketName:
    Type: String
    Description: Name of S3 bucket for website hosting (must be globally unique)

  DocumentBucketName:
    Type: String
    Description: Name of S3 bucket for document storage (must be globally unique)

  AzureFoundryEndpoint:
    Type: String
    Description: Azure AI Foundry endpoint URL

  AzureSearchEndpoint:
    Type: String
    Description: Azure AI Search endpoint URL

  AzureSearchIndex:
    Type: String
    Default: rag-documents
    Description: Azure AI Search index name

Resources:
  # S3 bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

  # S3 bucket policy for public read access
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  # S3 bucket for document storage
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DocumentBucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

  # CloudFront distribution for website
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # Cognito user pool for authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'rag-user-pool-${Environment}'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

  # Cognito user pool client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'rag-client-${Environment}'
      GenerateSecret: false
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: false

  # API Gateway for backend API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'rag-api-${Environment}'
      Description: 'API Gateway for Azure Foundry RAG'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

  # API Gateway authorizer using Cognito
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: cognito-authorizer
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt UserPool.Arn
      IdentitySource: 'method.request.header.Authorization'

  # API Gateway resources and methods
  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'chat'

  ChatMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatLambda.Arn}/invocations'
      RequestParameters:
        'method.request.header.Content-Type': true

  # API Gateway deployment and stage
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatMethod
    Properties:
      RestApiId: !Ref ApiGateway
      Description: !Sub 'Deployment for ${Environment}'

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: !Ref Environment

  # IAM role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'rag-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'rag-lambda-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt DocumentBucket.Arn
                  - !Sub '${DocumentBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !GetAtt ConversationsTable.Arn
                  - !GetAtt DocumentsTable.Arn
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt DocumentProcessingQueue.Arn

  # Lambda function for chat
  ChatLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'rag-chat-lambda-${Environment}'
      Handler: chat-lambda.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref WebsiteBucketName
        S3Key: lambda-package/chat-lambda.zip
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          AZURE_FOUNDRY_ENDPOINT: !Ref AzureFoundryEndpoint
          AZURE_SEARCH_ENDPOINT: !Ref AzureSearchEndpoint
          AZURE_SEARCH_INDEX: !Ref AzureSearchIndex
          DYNAMO_TABLE: !Ref ConversationsTable
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

  # Lambda permission for API Gateway to invoke chat lambda
  ChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/chat'

  # DynamoDB table for conversations
  ConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'rag-conversations-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: conversationId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: conversationId
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

  # DynamoDB table for documents
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'rag-documents-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

  # SQS queue for document processing
  DocumentProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'rag-document-processing-${Environment}'
      MessageRetentionPeriod: 86400
      VisibilityTimeout: 300
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Azure Foundry RAG

Outputs:
  WebsiteURL:
    Description: 'URL of the S3 website'
    Value: !GetAtt WebsiteBucket.WebsiteURL

  CloudFrontURL:
    Description: 'URL of the CloudFront distribution'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'

  ApiURL:
    Description: 'URL of the API Gateway'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'

  UserPoolId:
    Description: 'ID of the Cognito user pool'
    Value: !Ref UserPool

  UserPoolClientId:
    Description: 'ID of the Cognito user pool client'
    Value: !Ref UserPoolClient